"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Unmount = void 0;
const imperative_1 = require("@zowe/imperative");
const core_for_zowe_sdk_1 = require("@zowe/core-for-zowe-sdk");
const ZosFiles_constants_1 = require("../../constants/ZosFiles.constants");
const ZosFiles_messages_1 = require("../../constants/ZosFiles.messages");
/**
 * This class holds helper functions that are used to unmount file systems through the z/OS MF APIs
 */
class Unmount {
    /**
     * Unmount a Unix file system
     *
     * @param {AbstractSession}  session         - z/OS MF connection info
     * @param {string}           fileSystemName  - contains the file system name
     * @param {IZosFilesOptions} options         - contains the options to use
     *
     * @returns {Promise<IZosFilesResponse>} A response indicating the outcome of the API
     *
     * @throws {ImperativeError} file system name must be set
     * @throws {Error} When the {@link ZosmfRestClient} throws an error
     *
     * @see https://www.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.izua700/IZUHPINFO_API_UnmountUnixFile.htm
     */
    static fs(session, fileSystemName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            // We require the file system name
            imperative_1.ImperativeExpect.toNotBeNullOrUndefined(fileSystemName, ZosFiles_messages_1.ZosFilesMessages.missingFileSystemName.message);
            imperative_1.ImperativeExpect.toNotBeEqual(fileSystemName, "", ZosFiles_messages_1.ZosFilesMessages.missingFileSystemName.message);
            const endpoint = ZosFiles_constants_1.ZosFilesConstants.RESOURCE + ZosFiles_constants_1.ZosFilesConstants.RES_MFS + "/" + fileSystemName;
            const jsonContent = JSON.stringify({ action: "unmount" });
            const headers = [];
            headers.push({ "Content-Length": jsonContent.length });
            if (options && options.responseTimeout) {
                headers.push({ [core_for_zowe_sdk_1.ZosmfHeaders.X_IBM_RESPONSE_TIMEOUT]: options.responseTimeout.toString() });
            }
            const data = yield core_for_zowe_sdk_1.ZosmfRestClient.putExpectString(session, endpoint, headers, jsonContent);
            return {
                success: true,
                commandResponse: ZosFiles_messages_1.ZosFilesMessages.fsUnmountedSuccessfully.message,
                apiResponse: data
            };
        });
    }
}
exports.Unmount = Unmount;
//# sourceMappingURL=Unmount.js.map