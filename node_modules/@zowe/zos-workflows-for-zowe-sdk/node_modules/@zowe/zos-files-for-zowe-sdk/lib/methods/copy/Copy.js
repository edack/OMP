"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Copy = void 0;
const imperative_1 = require("@zowe/imperative");
const path_1 = require("path");
const core_for_zowe_sdk_1 = require("@zowe/core-for-zowe-sdk");
const ZosFiles_constants_1 = require("../../constants/ZosFiles.constants");
const ZosFiles_messages_1 = require("../../constants/ZosFiles.messages");
/**
 * This class holds helper functions that are used to copy the contents of datasets through the
 * z/OSMF APIs.
 */
class Copy {
    /**
     * Copy the contents of a dataset
     *
     * @param {AbstractSession}   session        - z/OSMF connection info
     * @param {IDataSet}          toDataSet      - The data set to copy to
     * @param {IDataSetOptions}   options        - Options
     *
     * @returns {Promise<IZosFilesResponse>} A response indicating the status of the copying
     *
     * @throws {ImperativeError} Data set name must be specified as a non-empty string
     * @throws {Error} When the {@link ZosmfRestClient} throws an error
     *
     * @see https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.izua700/IZUHPINFO_API_PutDataSetMemberUtilities.htm
     */
    static dataSet(session, { dataSetName: toDataSetName, memberName: toMemberName }, options) {
        return __awaiter(this, void 0, void 0, function* () {
            imperative_1.ImperativeExpect.toBeDefinedAndNonBlank(options.fromDataSet.dataSetName, "fromDataSetName");
            imperative_1.ImperativeExpect.toBeDefinedAndNonBlank(toDataSetName, "toDataSetName");
            const endpoint = path_1.posix.join(ZosFiles_constants_1.ZosFilesConstants.RESOURCE, ZosFiles_constants_1.ZosFilesConstants.RES_DS_FILES, toMemberName == null ? toDataSetName : `${toDataSetName}(${toMemberName})`);
            imperative_1.Logger.getAppLogger().debug(`Endpoint: ${endpoint}`);
            const payload = Object.assign({ "request": "copy", "from-dataset": {
                    dsn: options.fromDataSet.dataSetName,
                    member: options.fromDataSet.memberName
                } }, options);
            delete payload.fromDataSet;
            const reqHeaders = [
                imperative_1.Headers.APPLICATION_JSON,
                { [imperative_1.Headers.CONTENT_LENGTH]: JSON.stringify(payload).length.toString() }
            ];
            if (options.responseTimeout != null) {
                reqHeaders.push({ [core_for_zowe_sdk_1.ZosmfHeaders.X_IBM_RESPONSE_TIMEOUT]: options.responseTimeout.toString() });
            }
            try {
                yield core_for_zowe_sdk_1.ZosmfRestClient.putExpectString(session, endpoint, reqHeaders, payload);
                return {
                    success: true,
                    commandResponse: ZosFiles_messages_1.ZosFilesMessages.datasetCopiedSuccessfully.message
                };
            }
            catch (error) {
                imperative_1.Logger.getAppLogger().error(error);
                throw error;
            }
        });
    }
}
exports.Copy = Copy;
//# sourceMappingURL=Copy.js.map