"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logout = void 0;
const imperative_1 = require("@zowe/imperative");
const ZosmfRestClient_1 = require("../rest/ZosmfRestClient");
const LogoutConstants_1 = require("./LogoutConstants");
/**
 * Class to handle logging out of APIML.
 * @export
 * @class Logout
 */
class Logout {
    /**
     * Perform APIML logout to invalidate LTPA2 or other token types.
     * @static
     * @param {AbstractSession} session
     * @returns
     * @memberof Login
     */
    static apimlLogout(session) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            imperative_1.Logger.getAppLogger().trace("Logout.logout()");
            imperative_1.ImperativeExpect.toNotBeNullOrUndefined(session, "Required session must be defined");
            imperative_1.ImperativeExpect.toBeEqual((_a = session.ISession) === null || _a === void 0 ? void 0 : _a.tokenType, "apimlAuthenticationToken", "Token type for API ML logout must be apimlAuthenticationToken.");
            imperative_1.ImperativeExpect.toNotBeNullOrUndefined((_b = session.ISession) === null || _b === void 0 ? void 0 : _b.tokenValue, "Session token not populated. Unable to log out.");
            const client = new ZosmfRestClient_1.ZosmfRestClient(session);
            try {
                yield client.request({
                    request: "POST",
                    resource: LogoutConstants_1.LogoutConstants.APIML_V1_RESOURCE
                });
            }
            catch (err) {
                if (!err.message.includes(LogoutConstants_1.LogoutConstants.APIML_V1_TOKEN_EXP_ERR)) {
                    throw err;
                }
            }
            if (client.response.statusCode !== imperative_1.RestConstants.HTTP_STATUS_204) {
                if (!(client.response.statusCode === imperative_1.RestConstants.HTTP_STATUS_500 &&
                    client.dataString.includes(LogoutConstants_1.LogoutConstants.APIML_V1_TOKEN_EXP_ERR))) {
                    throw new imperative_1.ImperativeError(client.populateError({
                        msg: `REST API Failure with HTTP(S) status ${client.response.statusCode}`,
                        causeErrors: client.dataString,
                        source: imperative_1.SessConstants.HTTP_PROTOCOL
                    }));
                }
            }
        });
    }
}
exports.Logout = Logout;
//# sourceMappingURL=Logout.js.map