"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultProfile = exports.getZoweDir = void 0;
const imperative_1 = require("@zowe/imperative");
const path = require("path");
/**
 * Retrieves the Zowe CLI home directory. In the situation Imperative has
 * not initialized it we mock a default value.
 * @returns {string} - Returns the Zowe home directory
 */
function getZoweDir() {
    if (imperative_1.ImperativeConfig.instance.loadedConfig == null) {
        imperative_1.ImperativeConfig.instance.loadedConfig = {
            defaultHome: path.join(require("os").homedir(), ".zowe"),
            envVariablePrefix: "ZOWE"
        };
    }
    return imperative_1.ImperativeConfig.instance.cliHome;
}
exports.getZoweDir = getZoweDir;
/**
 * Loads default z/OSMF profile. The profile must have already been
 * created using Zowe CLI, and not rely on base profiles
 *
 * @param {string} profileType - The name of the profile type
 * @param {boolean} mergeWithBase - Whether or not to merge with the base profile
 * @returns {IProfile} - The default profile (or merged profile, if requested)
 */
function getDefaultProfile(profileType, mergeWithBase) {
    return __awaiter(this, void 0, void 0, function* () {
        const profileRootDir = path.join(getZoweDir(), "profiles");
        const logger = imperative_1.Logger.getImperativeLogger();
        let profileManager;
        let profileLoaded;
        try {
            // Create the profile manager
            profileManager = new imperative_1.CliProfileManager({
                profileRootDirectory: profileRootDir,
                type: profileType
            });
            // Load the profile using the profile manager
            profileLoaded = yield profileManager.load({
                loadDefault: true
            });
        }
        catch (err) {
            logger.warn(err.message);
        }
        // Throw an error if there was no default profile found and no base profile requested
        if ((!profileLoaded || !profileLoaded.profile) && !mergeWithBase) {
            throw new imperative_1.ImperativeError({ msg: `Failed to load default profile of type "${profileType}"` });
        }
        // Give the profile back as-is if the profile is not to be merged with the base profile
        if (mergeWithBase === false) {
            return profileLoaded.profile;
        }
        let baseProfileManager;
        let baseProfileLoaded;
        try {
            baseProfileManager = new imperative_1.CliProfileManager({
                profileRootDirectory: profileRootDir,
                type: "base"
            });
            baseProfileLoaded = yield baseProfileManager.load({
                loadDefault: true
            });
        }
        catch (err) {
            logger.warn(err.message);
        }
        // Return service profile if there was no base profile found and service profile existed.
        // Return base profile if there was no service profile found and base profile existed.
        // If both exist, combine. Otherwise, error
        if ((!baseProfileLoaded || !baseProfileLoaded.profile) && (profileLoaded && profileLoaded.profile)) {
            return profileLoaded.profile;
        }
        else if (baseProfileLoaded && baseProfileLoaded.profile && (!profileLoaded || !profileLoaded.profile)) {
            return baseProfileLoaded.profile;
        }
        else if ((!baseProfileLoaded || !baseProfileLoaded.profile) && (!profileLoaded || !profileLoaded.profile)) {
            throw new imperative_1.ImperativeError({ msg: `Failed to load default profiles of types "${profileType}" and "base"` });
        }
        const combinedProfile = JSON.parse(JSON.stringify(baseProfileLoaded.profile));
        for (const propertyName in profileLoaded.profile) {
            if (profileLoaded.profile[propertyName] != null) {
                combinedProfile[propertyName] = profileLoaded.profile[propertyName];
            }
        }
        return combinedProfile;
    });
}
exports.getDefaultProfile = getDefaultProfile;
//# sourceMappingURL=ProfileUtils.js.map